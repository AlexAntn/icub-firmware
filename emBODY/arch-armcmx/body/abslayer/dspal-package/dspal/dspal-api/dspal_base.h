/*
 * Copyright (C) 2011 Department of Robotics Brain and Cognitive Sciences - Istituto Italiano di Tecnologia
 * Author:  Marco Accame
 * email:   marco.accame@iit.it
 * website: www.robotcub.org
 * Permission is granted to copy, distribute, and/or modify this program
 * under the terms of the GNU General Public License, version 2 or any
 * later version published by the Free Software Foundation.
 *
 * A copy of the license can be found at
 * http://www.robotcub.org/icub/license/gpl.txt
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details
*/

// - include guard ----------------------------------------------------------------------------------------------------
#ifndef _DSPAL_BASE_H_
#define _DSPAL_BASE_H_


/** @file       dspal_base.h
	@brief      This header file implements basic public interface to the dsp abtraction layer 
	@author     marco.accame@iit.it
	@date       12/16/2010
**/

/* @defgroup dspal_base DSP abstraction layer
    cercecvecve.
    
    @{		
 **/


// - external dependencies --------------------------------------------------------------------------------------------

#include "stdint.h"




// - public #define  --------------------------------------------------------------------------------------------------

 
// - declaration of public user-defined types ------------------------------------------------------------------------- 


/** @typedef    typedef enum dspal_result_t 
    @brief      dspal_result_t result of operations which can be succesful or which do lead to fatal errors
 **/
typedef enum
{
    dspal_res_OK                    = 0,            /**< No error */
    dspal_res_NOK_generic           = -1,           /**< generic error */
    dspal_res_NOK_nullpointer       = -2,           /**< there is a null pointer */
    dspal_res_NOK_argument_error    = -31,          /**< One or more arguments are incorrect */
    dspal_res_NOK_length_error      = -32,          /**< Length of data buffer is incorrect */
    dspal_res_NOK_size_mismatch     = -33,          /**< Size of matrices is not compatible with the operation. */
    dspal_res_NOK_nan_or_inf        = -34,          /**< Not-a-number (NaN) or infinity is generated */
    dspal_res_NOK_singular_matrix   = -35,          /**< Generated by matrix inversion if the input matrix is singular and cannot be inverted. */
    dspal_res_NOK_test_failure      = -36,          /**< Test Failed  */
} dspal_result_t;


/** @typedef    typedef enum dspal_errorcode_t 
    @brief      dspal_error_t contains system specific error codes used in user-defined function usr_on_fatal_error()
 **/ 
typedef enum 
{
    dspal_error_generic                  = 0xE0,             
    dspal_error_missingconfiguration     = 0xE1,       
    dspal_error_missingmemory            = 0xE2,       
    dspal_error_incorrectparameter       = 0xE3,       
    dspal_error_unsupportedbehaviour     = 0xE4,
    dspal_error_internal0                = 0xF0,
    dspal_error_internal1                = 0xF1,
    dspal_error_internal2                = 0xF2,
    dspal_error_internal3                = 0xF3,             
    dspal_error_internal4                = 0xF4,
    dspal_error_internal5                = 0xF5
} dspal_errorcode_t;


/** @typedef    typedef struct dspal_fn_cfg_t
    @brief      dspal_fn_cfg_t keeps pointers to functions of DSPAL which can be redefined by the user.
 **/
typedef struct
{
    /** When a fatal error is detected, ... */ 
    void            (*usr_on_fatal_error)(dspal_errorcode_t errorcode, const char * errormsg);
} dspal_fn_cfg_t;


/** @typedef    typedef struct dspal_cfg_t
    @brief      dspal_cfg_t keeps the configuration of DSPAL. This type should be used to instantiate one constant
                variable, possibly using dspal_cfg.[h, c] files.
 **/
typedef struct
{
    uint8_t         dsplibtype;             /**< The underlying DSPLIB: an enum dspal_dsplibtype_t. dspal_dsplibtype_armcmsis is 0   */   
    uint8_t         cpufam;                 /**< The CPU type: an enum dspal_cpufamily_t. dspal_cpufam_armcm3 is 0                 */                                 
    dspal_fn_cfg_t  extfn;                  /**< User-defined behaviour defined with external function pointers */
} dspal_cfg_t;


/** @typedef    typedef enum dspal_dsplibtype_t 
    @brief      dspal_dsplibtype_t contains all possible DSP libraries supported by DSPAL
 **/ 
typedef enum
{
    dspal_dsplibtype_armcmsis       = 0    /**< the only supported so far */
} dspal_dsplibtype_t;


/** @typedef    typedef enum dspal_cpufamily_t 
    @brief      dspal_cpufamily_t contains all possible families of CPUs supported by DSPAL
 **/ 
typedef enum
{
    dspal_cpufam_armcm3              = 0,    /**< the only supported so far */
    dspal_cpufam_armcm4              = 1,
    dspal_cpufam_dspic               = 2
} dspal_cpufamily_t;


/**
    @brief 8-bit fractional data type in 1.7 format.
*/
typedef int8_t dspal_q7_t;


/**
    @brief 16-bit fractional data type in 1.15 format.
*/
typedef int16_t dspal_q15_t;


/**
    @brief 32-bit fractional data type in 1.31 format.
*/
typedef int32_t dspal_q31_t;


/**
    @brief 64-bit fractional data type in 1.63 format.
*/
typedef int64_t dspal_q63_t;

/** 
    @brief 32-bit floating-point type definition.
*/
typedef float dspal_f32_t;


/**
    @brief 64-bit floating-point type definition.
*/
typedef double dspal_f64_t;



                    
    
// - declaration of extern public variables, ... but better using use _get/_set instead -------------------------------
// empty-section (so far)


// - declaration of extern public functions ---------------------------------------------------------------------------


/** @fn         extern uint32_t dspal_base_memory_getsize(const dspal_cfg_t *cfg, uint32_t *size08aligned)
    @brief      Gets the size of the 8-byte aligned memory required by the dspal for configuration @e cfg.
    @param      cfg             Pointer to the requested configuration.
    @param      size08aligned   Size of the 8-byte aligned memory which is required to run the osal. If 
                                the passed value is NULL, then the function does not use it to store the
                                return value.
    @return     The size the 8-byte aligned memory which is required to run the dspal
 **/
extern uint32_t dspal_base_memory_getsize(const dspal_cfg_t *cfg, uint32_t *size08aligned);


/** @fn         extern dspal_result_t dspal_base_system_init(const dspal_fg_t *cfg, uint64_t *data08aligned)
    @brief      Initialise the osal with the memory required by the configuration @e cfg.
    @param      cfg             Pointer to the requested configuration.
    @param      data08aligned   8-byte aligned memory which is required to run the dspal.
    @return     On success dspal_res_OK, otherwise trapped inside the error function in an infinite loop.
 **/
extern dspal_result_t dspal_base_initialise(const dspal_cfg_t *cfg, uint64_t *data08aligned);

       
             
/* @}            
    end of group dspal_base  
 **/

#endif  // include-guard


// - end-of-file (leave a blank line after)----------------------------------------------------------------------------

