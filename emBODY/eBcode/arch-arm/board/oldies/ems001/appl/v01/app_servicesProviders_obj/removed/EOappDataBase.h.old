/*
 * Copyright (C) 2011 Department of Robotics Brain and Cognitive Sciences - Istituto Italiano di Tecnologia
 * Author:  Valentina Gaggero
 * email:   valentina.gaggero@iit.it
 * website: www.robotcub.org
 * Permission is granted to copy, distribute, and/or modify this program
 * under the terms of the GNU General Public License, version 2 or any
 * later version published by the Free Software Foundation.
 *
 * A copy of the license can be found at
 * http://www.robotcub.org/icub/license/gpl.txt
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details
*/


// - include guard ----------------------------------------------------------------------------------------------------
#ifndef _EOAPPDATABASE_H_
#define _EOAPPDATABASE_H_

#ifdef __cplusplus
extern "C" {
#endif


// - doxy begin -------------------------------------------------------------------------------------------------------

/** @file       EOappEncodersReader.h
    @brief     This file provides interface to encodersReader.
    @author    valentina.gaggero@iit.it
    @date       09/11/2012
**/
/** @defgroup eo_app_dataBase Object EOappDataBase
    .........     
    @{        
 **/


// - external dependencies --------------------------------------------------------------------------------------------
#include "eOcommon.h"
#include "EOconstvector.h"
#include "EOnv.h"
#include "eOboards.h"
#include "EOicubCanProto_specifications-NEW.h"
#include "EOappEncodersReader.h"

// - public #define  --------------------------------------------------------------------------------------------------
// empty-section
 
// - declaration of public user-defined types ------------------------------------------------------------------------- 
typedef struct
{
    eObrd_boardId_t                         belong2board;
    eOicubCanProto_jm_indexinBoard_t        indexinboard;
} eOappTheDB_cfg_jointOrMotorCanLocation_t;

typedef struct
{
    eOcanport_t                             emscanport;
    eOicubCanProto_canBoardAddress_t        addr;
} eOappTheDB_canBoardCanLocation_t;

typedef eOappTheDB_canBoardCanLocation_t    eOappTheDB_sensorCanLocation_t;

typedef struct
{
    eOappTheDB_cfg_jointOrMotorCanLocation_t    canLoc;
} eOappTheDB_cfg_jointInfo_t;

typedef struct
{
    eOappTheDB_cfg_jointOrMotorCanLocation_t    canLoc;
} eOappTheDB_cfg_MotorInfo_t;


typedef struct
{
    eOappTheDB_canBoardCanLocation_t           canLoc;
    eObrd_types_t                              type;
} eOappTheDB_cfg_canBoardInfo_t;



// typedef enum 
// {
//     eOappTheDB_hid_sensortype__mais = 0,
//     eOappTheDB_hid_sensortype__strain = 1
// } eOappTheDB_sensorType_t;

// enum{eOappTheDB_hid_sensorType_MAXnumber = 2};



typedef struct
{
    eObrd_boardId_t                           belong2board;
} eOappTheDB_cfg_snrMaisInfo_t;

typedef struct
{
    eObrd_boardId_t                           belong2board;
} eOappTheDB_cfg_snrStrainInfo_t;


typedef struct
{
    eOnvEP_t                        mc_endpoint;   /**<  motion control endopoint managed by the application */
    eOnvEP_t                        as_endpoint;   /**<  analog sensor endopoint managed by the application */
    eOnvEP_t                        sk_endpoint;   /**<  analog sensor endopoint managed by the application */
    const EOconstvector* const      canboardsList; /**< list of CAN boars connected to ems by can */
    const EOconstvector* const      jointsList;    /**< list of joints managed by an EMS board */
    const EOconstvector* const      motorsList;    /**< list of motors managed by an EMS board */
    const EOconstvector* const      snrMaisList;   /**< list of sensors managed by an EMS board */
    const EOconstvector* const      snrStrainList; /**< list of sensors managed by an EMS board */
    const EOconstvector* const      skinList;      /**< list of skin managed by an EMS board */
} eOappTheDB_cfg_t;

typedef struct
{
    eOcanport_t                             emscanport;
    eOicubCanProto_canBoardAddress_t        addr;
    eOicubCanProto_jm_indexinBoard_t        indexinboard;
} eOappTheDB_jointOrMotorCanLocation_t;

typedef enum 
{
    eOappTheDB_sensortype_mais                 = 0,
    eOappTheDB_sensortype_strain               = 1
} eOappTheDB_sensortype_t;


typedef eOappTheDB_canBoardCanLocation_t        eOappTheDB_SensorCanLocation_t;

typedef struct
{
    eOcanport_t                             emscanport;
} eOappTheDB_SkinCanLocation_t;


typedef struct EOappTheDB_hid                  EOappTheDB;


// - declaration of extern public variables, ...deprecated: better using use _get/_set instead ------------------------
// empty-section

// - declaration of extern public functions ---------------------------------------------------------------------------

extern EOappTheDB* eo_appTheDB_Initialise(const eOappTheDB_cfg_t *cfg);

extern EOappTheDB* eo_appTheDB_GetHandle(void);

extern uint16_t eo_appTheDB_GetNumeberOfConnectedJoints(EOappTheDB *p);

extern eOappEncReader_encoder_t eo_appTheDB_GetEncoderConnected2Joint(EOappTheDB *p, eOmc_jointId_t jId);

extern eOresult_t eo_appTheDB_GetJointId_ByJointCanLocation(EOappTheDB *p, eOappTheDB_jointOrMotorCanLocation_t *canloc_ptr, eOmc_jointId_t *jId_ptr);

extern eOresult_t eo_appTheDB_GetJointCanLocation_ByJointId(EOappTheDB *p, eOmc_jointId_t jId,  eOappTheDB_jointOrMotorCanLocation_t *canloc_ptr);

extern eOresult_t eo_appTheDB_GetMotorCanLocation_ByMotorId(EOappTheDB *p, eOmc_motorId_t mId,  eOappTheDB_jointOrMotorCanLocation_t *canloc_ptr);

extern eOresult_t eo_appTheDB_GetMotorId_ByMotorCanLocation(EOappTheDB *p, eOappTheDB_jointOrMotorCanLocation_t *canloc_ptr, eOmc_motorId_t *mId_ptr);




/** @}            
    end of group eo_app_encodersReader
 **/


#ifdef __cplusplus
}       // closing brace for extern "C"
#endif 

#endif  // include-guard

// - end-of-file (leave a blank line after)----------------------------------------------------------------------------


