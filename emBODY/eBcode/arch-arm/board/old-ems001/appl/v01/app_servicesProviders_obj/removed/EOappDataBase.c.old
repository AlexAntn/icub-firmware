/*
 * Copyright (C) 2011 Department of Robotics Brain and Cognitive Sciences - Istituto Italiano di Tecnologia
 * Author:  Valentina Gaggero
 * email:   valentina.gaggero@iit.it
 * website: www.robotcub.org
 * Permission is granted to copy, distribute, and/or modify this program
 * under the terms of the GNU General Public License, version 2 or any
 * later version published by the Free Software Foundation.
 *
 * A copy of the license can be found at
 * http://www.robotcub.org/icub/license/gpl.txt
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details
*/

// --------------------------------------------------------------------------------------------------------------------
// - doxy
// --------------------------------------------------------------------------------------------------------------------

/* @file       EOappDataBase.c
    @brief      This file implements data base obj.
    @author    valentina.gaggero@iit.it
    @date       09/11/2012
**/



// --------------------------------------------------------------------------------------------------------------------
// - external dependencies
// --------------------------------------------------------------------------------------------------------------------
#include "stdlib.h"
#include "string.h"

#include "EOtheMemoryPool.h"
#include "EOconstvector_hid.h"
#include "EOarray.h"
#include "eOcfg_nvsEP_mc.h"
#include "eOcfg_nvsEP_as.h"
#include "eOcfg_nvsEP_sk.h"

// --------------------------------------------------------------------------------------------------------------------
// - declaration of extern public interface
// --------------------------------------------------------------------------------------------------------------------
#include "EOappDataBase.h"



// --------------------------------------------------------------------------------------------------------------------
// - declaration of extern hidden interface 
// --------------------------------------------------------------------------------------------------------------------
#include "EOappDataBase_hid.h"


// --------------------------------------------------------------------------------------------------------------------
// - #define with internal scope
// --------------------------------------------------------------------------------------------------------------------
#define db_emscanportconnected2motorboard     eOcanport1 



// --------------------------------------------------------------------------------------------------------------------
// - definition (and initialisation) of extern variables. deprecated: better using _get(), _set() on static variables 
// --------------------------------------------------------------------------------------------------------------------


// --------------------------------------------------------------------------------------------------------------------
// - typedef with internal scope
// --------------------------------------------------------------------------------------------------------------------
// empty-section


// --------------------------------------------------------------------------------------------------------------------
// - declaration of static functions
// --------------------------------------------------------------------------------------------------------------------
eObool_t s_appTheDB_checkConfiguaration(const eOappTheDB_cfg_t *cfg);
eOresult_t s_appTheDB_generaldata_init(EOappTheDB *p);
eOresult_t s_appTheDB_canboardslist_init(EOappTheDB *p);
eOresult_t s_appTheDB_jointslist_init(EOappTheDB *p);
eOresult_t s_appTheDB_motorslist_init(EOappTheDB *p);
eOresult_t s_appTheDB_sensorslist_init(EOappTheDB *p);
eOresult_t s_appTheDB_skinlist_init(EOappTheDB *p);
eOresult_t s_appTheDB_canaddressLookuptbl_init(EOappTheDB *p);
// --------------------------------------------------------------------------------------------------------------------
// - definition (and initialisation) of static variables
// --------------------------------------------------------------------------------------------------------------------
EOappTheDB s_db = 
{
    .EO_INIT(.isinitted)    eobool_false
};
static EOarray *a;
// --------------------------------------------------------------------------------------------------------------------
// - definition of extern public functions
// --------------------------------------------------------------------------------------------------------------------
extern EOappTheDB* eo_appTheDB_Initialise(const eOappTheDB_cfg_t *cfg)
{
    eOresult_t res;
    EOappTheDB  *retptr;
    
    eOappTheDB_hid_canBoardInfo_t* b;
    eOappTheDB_cfg_canBoardInfo_t *b_cfg_ptr = NULL;
    
    if(NULL == cfg)
    {
        return(NULL);
    }
    
    a = eo_array_New(3, sizeof(eOappTheDB_hid_canBoardInfo_t), NULL);
//     b = (eOappTheDB_hid_canBoardInfo_t*)(a->data);
//     b_cfg_ptr = (eOappTheDB_cfg_canBoardInfo_t*)(cfg->canboardsList->item_array_data);
//     b[2].cfg_ptr = b_cfg_ptr[0];
    
        //b = (eOappTheDB_hid_canBoardInfo_t*)(a->data);
        b_cfg_ptr = (eOappTheDB_cfg_canBoardInfo_t*)(cfg->canboardsList->item_array_data);
        ((eOappTheDB_hid_canBoardInfo_t*)(a->data))[2].cfg_ptr = &b_cfg_ptr[0];

    
    if(!s_appTheDB_checkConfiguaration(cfg))
    {
        return(NULL);
    }
    
    retptr = &s_db;
    
    memcpy(&retptr->cfg, cfg, sizeof(eOappTheDB_cfg_t));
    
    res = s_appTheDB_generaldata_init(retptr);
    if(eores_OK != res)
    {
        return(NULL);
    }
    
    res = s_appTheDB_canboardslist_init(retptr);
    if(eores_OK != res)
    {
        return(NULL);
    }
    
    res = s_appTheDB_canaddressLookuptbl_init(p);
    if(eores_OK != res)
    {
        return(NULL);
    }
    
    res = s_appTheDB_jointslist_init(retptr);
    if(eores_OK != res)
    {
        return(NULL);
    }
    
    res = s_appTheDB_motorslist_init(retptr);
    if(eores_OK != res)
    {
        return(NULL);
    }

    res = s_appTheDB_sensorslist_init(retptr);
    if(eores_OK != res)
    {
        return(NULL);
    }
    
    res = s_appTheDB_skinlist_init(retptr);
    if(eores_OK != res)
    {
        return(NULL);
    }

    retptr->isinitted = eobool_true;
    
    return(retptr);
}

extern EOappTheDB* eo_appTheDB_GetHandle(void)
{
    return((s_db.isinitted) ? (&s_db) : NULL);
}


extern uint16_t eo_appTheDB_GetNumeberOfConnectedJoints(EOappTheDB *p)
{
    if(NULL == p)
    {
        return(0);
    }
    return(p->generaldata.numberofconnectedjoints)
}


extern uint16_t eo_appTheDB_GetNumeberOfConnectedMotors(EOappTheDB *p)
{
    if(NULL == p)
    {
        return(0);
    }
    return(p->generaldata.numberofconnectedmotors)
}


extern eOappEncReader_encoder_t eo_appTheDB_GetEncoderConnected2Joint(EOappTheDB *p, eOmc_jointId_t jId)
{
    if(NULL == p)
    {
        return(eOeOappEncReader_encoderUnused);
    }
    return(p->jointsList[jId].connectedEnc);

}

extern eOresult_t eo_appTheDB_GetJointCanLocation_ByJointId(EOappTheDB *p, eOmc_jointId_t jId,  eOappTheDB_jointOrMotorCanLocation_t *canloc_ptr)
{
    eOappTheDB_hid_canBoardInfo* b_ptr;
    if((NULL == p) || (NULL == canloc_ptr))
    {
        return(eores_NOK_nullpointer);
    }
    
    if(j >= p->generaldata.numberofconnectedjoints)
    {
        return(eores_NOK_nodata);
    }
    
    canloc_ptr->indexinboard = p->jointList[jId].cfg->indexinboard;

    b_ptr = eo_appTheDB_hid_GetBoardOfJoint(p, jId);
    canloc_ptr->addr = b_ptr->cfg->addr;
    canloc_ptr->emscanport = b_ptr->cfg->emscanport;
    
    return(eores_OK);
}

extern eOresult_t eo_appTheDB_GetMotorCanLocation_ByMotorId(EOappTheDB *p, eOmc_motorId_t mId,  eOappTheDB_jointOrMotorCanLocation_t *canloc_ptr)
{
    eOappTheDB_hid_canBoardInfo* b_ptr;
    if((NULL == p) || (NULL == canloc_ptr))
    {
        return(eores_NOK_nullpointer);
    }
    
    if(j >= p->generaldata.numberofconnectedmotors)
    {
        return(eores_NOK_nodata);
    }
    
    canloc_ptr->indexinboard = p->motorsList[mId].cfg->indexinboard;

    b_ptr = eo_appTheDB_hid_GetBoardOfMotor(p, mId);
    canloc_ptr->addr = b_ptr->cfg->addr;
    canloc_ptr->emscanport = b_ptr->cfg->emscanport;
    
    return(eores_OK);
}


extern eOresult_t eo_appTheDB_GetMotorId_ByMotorCanLocation(EOappTheDB *p, eOappTheDB_jointOrMotorCanLocation_t *canloc_ptr, eOmc_motorId_t *mId_ptr)
{
    eOappTheDB_hid_canBoardInfo *b_ptr;
    
    if((NULL == p) || (NULL == canloc_ptr) || (NULL == mId_ptr))
    {
        return(eores_NOK_nullpointer);
    }

    if(db_emscanportconnected2motorboard != canloc_ptr->emscanport)
    {
        return(eores_NOK_general);
    }

    b_ptr = eo_appTheDB_hid_GetBoardWithAddress(canloc_ptr->addr);
    *mId_ptr = b_ptr->u.jm.connectedmotors[canloc_ptr->indexinboard];

    return(eores_OK);
}


extern eOresult_t eo_appTheDB_GetSensorCanLocation(EOappTheDB *p, eOmc_sensorId_t sId,  eOappTheDB_sensorType_t type, eOappTheDB_sensorCanLocation_t *canloc_ptr)
{
    eOappTheDB_hid_canBoardInfo* b_ptr;
    
    if((NULL == p) || (NULL == canloc_ptr))
    {
        return(eores_NOK_nullpointer);
    }
    
    if((0 == p->generaldata.numberofconnectedsensors) || (NULL == p->sensorsList[type].cfg_p[tr))
    {
        return(eores_NOK_nodata);
    }
    
    canloc_ptr->indexinboard = p->motorsList[mId].cfg->indexinboard;

    b_ptr = eo_appTheDB_hid_GetBoardOfMotor(p, mId);
    canloc_ptr->addr = b_ptr->cfg->addr;
    canloc_ptr->emscanport = b_ptr->cfg->emscanport;
    
    return(eores_OK);
}



// --------------------------------------------------------------------------------------------------------------------
// - definition of extern hidden functions 
// --------------------------------------------------------------------------------------------------------------------
// empty-section


// --------------------------------------------------------------------------------------------------------------------
// - definition of static functions 
// --------------------------------------------------------------------------------------------------------------------
eObool_t s_appTheDB_checkConfiguaration(const eOappTheDB_cfg_t *cfg)
{
    uint8_t asEP_numofsensors;
    
    if((NULL == p->cfg.jointsList) || (NULL == p->cfg.motorsList) || (NULL == p->cfg.snrMaisList) ||
       (NULL == p->cfg.snrStrainList) || (NULL == p->cfg.skinList))
    {
        return(0);
    }

    //check if ep cfg and db cfg are consistent
    if(eo_cfg_nvsEP_mc_joint_numbermax_Get((eOcfg_nvsEP_mc_endpoint_t)cfg->mc_endpoint) != cfg->jointsList->size)
    {
        eo_errman_Error(eo_errman_GetHandle(), eo_errortype_warning, s_eobj_ownname, "joints cfg mismach ");
        return(0);
    }

    if(eo_cfg_nvsEP_mc_motor_numbermax_Get((eOcfg_nvsEP_mc_endpoint_t)cfg->mc_endpoint) != cfg->motorsList->size)
    {
        eo_errman_Error(eo_errman_GetHandle(), eo_errortype_warning, s_eobj_ownname, "motors cfg mismach ");
        return(0);
    }

    if(eo_cfg_nvsEP_as_mais_numbermax_Get((eOcfg_nvsEP_as_endpoint_t)cfg->as_endpoint) != cfg->snrMais->size)
    {
        eo_errman_Error(eo_errman_GetHandle(), eo_errortype_warning, s_eobj_ownname, "snr-mais cfg mismach ");
        return(0);
    }
    
    if(eo_cfg_nvsEP_as_strain_numbermax_Get((eOcfg_nvsEP_as_endpoint_t)cfg->as_endpoint) != cfg->snrStrain->size)
    {
        eo_errman_Error(eo_errman_GetHandle(), eo_errortype_warning, s_eobj_ownname, "snr-strain cfg mismach ");
        return(0);
    }
    
    if(eo_cfg_nvsEP_mc_skin_numbermax_Get((eOcfg_nvsEP_mc_endpoint_t)cfg->mc_endpoint) != cfg->skinList->size)
    {
        eo_errman_Error(eo_errman_GetHandle(), eo_errortype_warning, s_eobj_ownname, "skin cfg mismach ");
        return(0);
    }
    
    return(1);
}

eOresult_t s_appTheDB_generaldata_init(EOappTheDB *p)
{


    //set number of connected joints
    p->numberofconnectedjoints = cfg->jointsList->size;
   
    //set number of connected motors
    p->numberofconnectedmotors = cfg->motorsList->size;
    
    //set number of connected Mais sensors
    p->numberofconnectedsnrmais = cfg->snrMaisList->size;
    
    //set number of connected Mais sensors
    p->numberofconnectedsnrstrain = cfg->snrStrainList->size;
    
    //set number of connected skin
    p->numberofconnectedskin = cfg->skinList->size;

    //calculate max used can address
    p->maxusedcanaddr4motorboard = 0;
    
    if(NULL != p->cfg.canboardsList)
    {
        eOappTheDB_hid_canBoardInfo *b_cfg_ptr = (eOappTheDB_cfg_canBoardInfo_t*)(p->cfg.canboardssList->item_array_data);
        for(i = 0; i< p->cfg.canboardtsList->size; i++)
        {
            if((db_emscanportconnected2motorboard == p->b_cfg_ptr->canLoc.emscanport) &&(p->maxusedcanaddr < p->b_cfg_ptr->canLoc.addr))
            {
                p->maxusedcanaddr4motorboard = b_cfg_ptr->canLoc.addr;
            }   
        }
    }
    return(eores_OK);
}

eOresult_t s_appTheDB_canboardslist_init(EOappTheDB *p)
{
    uint8_t i;
    eOappTheDB_hid_canBoardInfo b_cfg_ptr = NULL;
    
    // 1) verify  if canboards are cfg
    if((NULL == p->cfg.canboardsList) || (0 == p->cfg.canboardsList->size)) 
    {
        eo_errman_Error(eo_errman_GetHandle(), eo_errortype_warning, s_eobj_ownname, "no canboards are config"); 
        return(eores_OK);
    } 
    
    //1) create canboardsList
    p->canboardsList = eo_mempool_GetMemory(eo_mempool_GetHandle(), eo_mempool_align_32bit, 
                                         sizeof(eOappTheDB_hid_canboardInfo), p->cfg.canboardsList->size);
    
    b_cfg_ptr = (eOappTheDB_cfg_canBoardInfo_t*)(p->cfg.canboardssList->item_array_data);
    for(i = 0; i< p->cfg.canboardtsList->size; i++)
    {
        //save pointer to board cfg info
        p->canboardsList[i].cfg_ptr = &b_cfg_ptr[i];
        
        //create array of "connected stuff" (joints or sensors)
        if((eobrd_mc4 == p->canboardsList[i].cfg_ptr->type) || (eobrd_1foc == p->canboardsList[i].cfg_ptr->type))
        {
          p->canboardsList[i].u.jm.connectedjoints =  eo_mempool_GetMemory(eo_mempool_GetHandle(), eo_mempool_align_32bit, 
                                                    sizeof(eOmc_jointId_t), eOicubCanProto_jm_indexInBoard_max);
          p->canboardsList[i].u.jm.connectedmotors =  eo_mempool_GetMemory(eo_mempool_GetHandle(), eo_mempool_align_32bit, 
                                                    sizeof(eOmc_motorId_t), eOicubCanProto_jm_indexInBoard_max);
        }
        else if((eobrd_mais == p->canboardsList[i].cfg_ptr->type) || (eobrd_skin == p->canboardsList[i].cfg_ptr->type) || (eobrd_strain == p->canboardsList[i].cfg_ptr->type))
        {
             p->canboardsList[i].u.connectedsensors =  eo_mempool_GetMemory(eo_mempool_GetHandle(), eo_mempool_align_32bit, 
                                                    sizeof(eOsnsr_sensorId_t), 1);
        }
    }
    return(eores_OK);
}

eOresult_t s_appTheDB_jointslist_init(EOappTheDB *p)
{
    int8_t                              i;
    eOappTheDB_cfg_jointOrMotorInfo_t   *j_cfg_ptr = NULL;
    eOappTheDB_hid_canBoardInfo         b_ptr = NULL;

    //1) create jointList
    p->jointsList = eo_mempool_GetMemory(eo_mempool_GetHandle(), eo_mempool_align_32bit, 
                                         sizeof(eOappTheDB_hid_jointInfo), p->numberofconnectedjoints);

 
    //2) fill jointsList
    j_cfg_ptr = (eOappTheDB_cfg_jointOrMotorInfo_t*)(p->cfg.jointsList->item_array_data);

    for(i = 0; i< p->cfg.jointsList->size; i++)
    {
        p->jointsList[i].cfg_ptr = &j_cfg_ptr[i];
        p->jointsList[i].connectedEnc = (eOappEncReader_encoder_t)i;
        p->jointsList[i].ref2motor = (eOmc_motorId_t)i;
        
        //2.1)make a connection beetween board to joint also ==> fill "connected joints list" of baord
        b_ptr = &p->canboardsList[p->jointsList[i].cfg_ptr->belong2board]; 
        b_ptr->u.jm.connectedjoints[p->jointsList[i].cfg_ptr->indexinboard] = (eOmc_jointId_t)i;
    }
    
    return(eores_OK);
}


eOresult_t s_appTheDB_motorslist_init(EOappTheDB *p)
{
    int8_t                              i;
    eOappTheDB_cfg_jointOrMotorInfo_t   *m_cfg_ptr = NULL;
    eOappTheDB_hid_canBoardInfo         b_ptr = NULL;

        
    //1) create jointList
    p->motorsList = eo_mempool_GetMemory(eo_mempool_GetHandle(), eo_mempool_align_32bit, 
                                         sizeof(eOappTheDB_hid_motorInfo), p->numberofconnectedmotors);

 
    //2) fill motorsList
    m_cfg_ptr = (eOappTheDB_cfg_jointOrMotorInfo_t*)(p->cfg.motorsList->item_array_data);

    for(i = 0; i< p->cfg.motorsList->size; i++)
    {
        p->motorsList[i].cfg_ptr = &m_cfg_ptr[i];
        p->motorsList[i].ref2joint = (eOmc_jointId_t)i;
        
        //2.1)make a connection beetween board to joint also ==> fill "connected joints list" of board
        b_ptr = &p->canboardsList[p->motorsList[i].cfg_ptr->belong2board]; //get pointer to motors's board 
        b_ptr->u.jm.connectedmotors[p->motorsList[i].cfg_ptr->indexinboard] = (eOmc_motorId_t)i; //set motor's id
    }
    
    return(eores_OK);
}


eOresult_t s_appTheDB_snrMaislist_init(EOappTheDB *p)
{
    int8_t                              i;
    eOappTheDB_cfg_sensorInfo_t         *s_cfg_ptr = NULL;
    eOappTheDB_hid_canBoardInfo         b_ptr = NULL;

    //if no sensor is connected to board ==> nothing to do and return ok
    if(0 == p->generaldata.numberofconnectedsnrmais)
    {
        p->snrMaisList = NULL;
        return(eores_OK);
    }
    
    //1) create sensors mais List
    p->sensorsList = eo_mempool_GetMemory(eo_mempool_GetHandle(), eo_mempool_align_32bit, 
                                          sizeof(eOappTheDB_hid_motorInfo), p->generaldata.numberofconnectedsnrmais);

 
    //2) fill sensors mais List
    s_cfg_ptr = (eOappTheDB_cfg_sensorInfo_t*)(p->cfg.snrMaisList->item_array_data);

    for(i = 0; i< p->generaldata.numberofconnectedsnrmais; i++)
    {
        p->sensorsList[s_cfg_ptr[i].type].cfg_ptr = &s_cfg_ptr[i];
        /* Since almost only one sensor is connected to ems, i don't use a table to get sensor id(it will always 0) */
    }
    
    return(eores_OK);
}


eOresult_t s_appTheDB_skinlist_init(EOappTheDB *p)
{
    int8_t                              i;
    eOappTheDB_cfg_sensorInfo_t         *sk_cfg_ptr = NULL;
    eOappTheDB_hid_canBoardInfo         b_ptr = NULL;

    //if no sensor is connected to board ==> nothing to do and return ok
    if(0 == p->numberofconnectedskin)
    {
        p->skinList = NULL;
        return(eores_OK);
    }
    
    //1) create sensorsList
    p->skinList = eo_mempool_GetMemory(eo_mempool_GetHandle(), eo_mempool_align_32bit, 
                                          sizeof(eOappTheDB_hid_motorInfo), p->numberofconnectedskin);

 
    //2) fill sensorsList
    sk_cfg_ptr = (eOappTheDB_cfg_sensorInfo_t*)(p->cfg.skinList->item_array_data);

    for(i = 0; i< p->numberofconnectedskin; i++)
    {
        p->skinList[i].cfg_ptr = &sk_cfg_ptr[i];
        /* Since skin is seen like a unique board, connected to a specific ems port 
            i don't need a method to get skin id by can location */
    }
    
    return(eores_OK);
}


eOresult_t s_appTheDB_canaddressLookuptbl_init(EOappTheDB *p)
{
    uint8_t i;
    eOicubCanProto_canBoardAddress_t addr;
    
    
    p->canaddressLookuptbl = eo_mempool_GetMemory(eo_mempool_GetHandle(), eo_mempool_align_32bit, 
                                                  sizeof(eOicubCanProto_canBoardAddress_t), 
                                                  p->maxusedcanaddr4motorboard);
    
    for(i=0; i<p->cfg.canboardsList->size; i++)
    {
        if((eobrd_1foc != p->canboardsList[i].cfg_ptr->type) && (eobrd_mc4 != p->canboardsList[i].cfg_ptr->type))
        {
            continue;
        }        
        addr = p->canboardsList[i].cfg_ptr->canLoc.addr;
        p->canaddressLookuptbl[addr] = (eObrd_boardId_t)i;
    }
}

// --------------------------------------------------------------------------------------------------------------------
// - end-of-file (leave a blank line after)
// --------------------------------------------------------------------------------------------------------------------



