
HOWTO: create a stm32hal library from a CUBE-MX project. and use it.


1.  Introduction

In here there are steps for generating a new stm32hal library starting from CUBE-MX.
The CUBE-MX project must generate a MDK project which uses the STM32 HAL library and a pair of 
.h/.c files for each HW peripheral.

1.1 Used terminology

Let's give now some terms: the board is named ${brd}, it mounts a mpu named ${mpu} of the family 
${mpufamily} and the STM32 HAL library has version ${stmlibversion}. The MDK project has a device
named ${MDKDEVICE}.

As an example, for board RFE we have: ${brd} = rfe, ${BRD} = RFE, ${MPU} = STM32L452xx, 
${MDKDEVICE} = STM32L452CEUx, 
${MPUFAMILY} = STM32L4xx, ${mpufamily} = stm32l4xx, ${mpufamilyshort} = stm32l4, 
${stmlibversion} = v1.8.3. The 

1.2 The steps

Here are the steps one must follow.

A.  Import the relevant CUBE-MX project without changes
B.  Define the macro which will shape all code for the compilation of the library 
C.  Adapt the API section to add references to the new board
D.  Adapt the SOURCE section. It is formed of the following parts.
    -   The DRIVER part keeps the code which CUBE-MX retrieves from the STM32 HAL (hardware abstraction layer) 
        STM LL (low level APIs). This code is specific for a family of MPUs (e.g., the STM32L4xx) and is regularly 
        updated over time. We keep this section MOSTLY UNCHANGED. 
    -   The BOARD part keeps those parts of code which CUBE-MX generates for the initialization of pins and peripherals
        of the MPU. We keep this part MOSTLY UNCHANGED.
    -   The CONFIG part contains code with macros and #include and some functions which glues all together. 
E.  Create a project which compiles all teh code to generate a library whcih will be put inside the lib folder.
F.  Write down the ${MPU} name to use in the MDK project of a new application which links the library
G.  Provide a suitable startput file to be used in the MDK project.
H.  Use the library in a sample application named ${appl} by:
    -   generation a project for the given ${MPU},
    -   add to it the stm32hal.${brd}.lib, the stm32hal.startup.${brd}.s file, a copy of 
        stm32hal_stg_template.h in ./cfg/stm32hal_stg_${appl}.h which is required to define 
        the heap and stack sizes, 
    -   defining macro STM32HAL_BOARD_${BRD}, 
    -   adding in the C include paths the stm32hal/api folder to see the library funtions,
    -   adding the ./cfg folder to the path of the asm include paths,
    -   etc. 


2.  The steps in details
    
2.1 CUBE-MX project

    Copy the MDK project generated by CUBE-MX into the stm32hal/cubemx/${brd} folder.
    Open the project and take note of the mpu name ${MPU} in section Options/C/C++ and of the mpu family ${MPUFAMILY} which is embedded
    in the project group named Drivers/${MPUFAMILY}_HAL_Driver.
    
    For instance, the board RFE has ${MPU} = STM32L452xx and ${MPUFAMILY} = STM32L4xx.

    
2.2 Board MACRO

    Specify a new STM32HAL_BOARD_${BRD} macro name. this is the macro which will shape any code of the .lib and of the APIs
    
    For instance, the board RFE will need STM32HAL_BOARD_RFE to be defined.
    
    
2.3 API section

    Adapt the files in the stm32hal/api folder to manage the new STM32HAL_BOARD_${BRD} macro name.

    a.  Edit file stm32hal_define.h to generate the following macros if STM32HAL_BOARD_${BRD} is defined:
            #define ${MPU}
            #define STM32HAL_${MPUFAMILY}
            
        The first macro is needed by the STM32 HAL to shape its code. The second macro is not used so far.
      
        For instance, for board RFE we have added:

        +   #elif   defined(STM32HAL_BOARD_RFE)
        +
        +       // it has a STM32L452xx mpu
        +       #if !defined(STM32L452xx)
        +       #define STM32L452xx
        +       #endif  
        +
        +       // of type STM32L4    
        +       #if !defined(STM32HAL_STM32L4xx)
        +       #define STM32HAL_STM32L4xx
        +       #endif      
        +   
            #else
                    #error STM32HAL: you must define a STM32HAL_BOARD_${BRD}
            #endif

    b.  Edit file stm32hal_driver.h to include the API of the correct HAL driver library provided by ST Microelectronics.
        The inclusion must be conditioned to STM32HAL_BOARD_${BRD} being defined. 
        The file to be included is:
            #include "../src/driver/${drivername}/inc/${mpufamily}_hal.h"   
        Details will be clear after reading the DRIVER section.
      
        For instance, for board RFE we have added:

        +   #elif   defined(STM32HAL_BOARD_RFE)
        +
        +       #include "../src/driver/stm32l4-v183/inc/stm32l4xx_hal.h" 
        +   
            #else
                    #error STM32HAL: the STM32HAL_BOARD_${BRD} is undefined
            #endif
    
    c.  Edit file stm32hal_board.h to include the API specific to the board support package of ${brd} as generated by CUBE-MX 
        The inclusion must be conditioned to STM32HAL_BOARD_${BRD} being defined.
        
        The following files will be included:
        
        #include "../src/board/${brd}/inc/stm32hal_driver_cfg_of_${brd}.h"
        #include "../src/board/${brd}/inc/main.h"
        #include "../src/board/${brd}/inc/${everyperipheral}.h" 
        
        where ${everyperipheral} can be adc, can, dma, i2c, rng, tim, etc.

        See the BOARD section to clarify which files to include. 
        
        
2.4 DRIVER section

    Create and populate the stm32hal/src/driver/${drivername} folder. 
    
    In here we shall copy the HAL driver library provided by ST Microelectronics which CUBE-MX put inside the MDK project.
    We also add some config files which allow to shape the code of the library for the particular ${MPU} and ${BRD} pair.
    
    We typically use one specific library for each board, but it is possible also that two boards can share the same library.
    For instance, the strain2 and mtb4 share the same library under the folder driver/stm32l4-v1.7.2, but the rfe board uses a 
    different library only for itself under driver/stm32l4-v1.8.3.
    The library is specific of a given ${mpufamily} and is typically updated every six months. All our three boards are of teh same
    ${mpufamily} and we could make all of them use only one library: the latest version. But that would require testing huge quantities of
    software at each new release of ST Microelectronics.
    
    To avoid continuous update and tests we have decided to allow multiple drivers: one for each new board.
    
    Even if it is possible to use any name for ${drivername} it is stongly advised to use: ${drivername} = ${mpufamilyshort}-${stmlibversion}
    
    For the case of strain2 and mtb4 we use the same library and we have: ${drivername} = ${mpufamilyshort}-${stmlibversion} = stm32l4-v1.7.2
    For the case of board rfe we have a new version of the library hence we have: ${drivername} = ${mpufamilyshort}-${stmlibversion} = stm32l4-v1.8.3

    Here are the instructions.
    
    Add three subfolders: ${drivername}/inc, ${drivername}/src and ${drivername}/cfg

    Now, you must copy files in the following way:
    - in ${drivername}/src put: all files inside stm32hal/cubemx/${brd}/Drivers/${MPUFAMILY}_HAL_Driver/Src
      For the RFE board the folder is /stm32/cubemx/rfe/Drivers/STM32L4xx_HAL_Driver/Src
    - in ${drivername}/inc put: all files inside stm32hal/cubemx/${brd}/Drivers/${MPUFAMILY}_HAL_Driver/Inc
      they are all .h files related to the .c of the drivers of above.
    - in ${drivername}/src put: the file system_${mpufamily}.c
      For the RFE board the file is system_stm32l4xx.c which is in folder stm32hal/cubemx/rfe/Drivers/CMSIS/Device/ST/STM32L4xx/Source/Templates
    - in ${drivername}/inc put: all files in stm32hal\cubemx\${brd}\Drivers\CMSIS/Include    
    - in ${drivername}/inc put: all files in stm32hal\cubemx\${brd}\Drivers\CMSIS/Device/ST/${MPUFAMILY}/Include
    
    Now you must edit the file ${mpufamily}_hal.h and include file stm32hal_driver_cfg.h instead of ${mpufamily}_hal_conf.h
    For the case of board RFE:
    
    +   // IIT-EXT
    +   #if defined(USE_STM32HAL)
    +       // path is referred to location of this file
    +       #include "../../../config/stm32hal_driver_cfg.h"
    +   #else
    +       #warning you are using a stm32hal file w/ USE_STM32HAL undefined ... are you sure?   
        /* Includes ------------------------------------------------------------------*/
        #include "stm32l4xx_hal_conf.h"
    +   #endif
    
    
    Then you must edit the file ${mpufamily}.h and add the following code before any other include or macro define:
    
    +   // IIT-EXT
    +   #include "../../../../api/stm32hal_define.h"
    
    This code will propagate all the proper macros to this file, so that the correct .h files are included.
    
 

2.5 CONFIG section

    - Add in file src/config/stm32hal_driver_cfg.h a section for STM32HAL_BOARD_${BRD} which includes the file stm32hal_driver_cfg_of_${brd}.h 
    - Edit the file stm32hal_driver_cfg_of_${brd}.h following instructions on the inside of a template file.

    
2.6 BOARD section

    Look at the section Application/User in the MDK project. 
    Put all the .c files into folder stm32hal/src/board/${brd}/src and the relecant .h files into stm32hal/src/board/${brd}/inc
    remove the files you dont need for the .lib (e.g., the main.c file and others which are application specific).
    
    do following changes:
    -   in .h file use #include "stm32hal.h" instead of #include "${mpufamily}_hal.h"
        +   // IIT-EXT
        +   #if defined(USE_STM32HAL)
        +       #include "stm32hal.h"
        +   #else
            #include "stm32l4xx_hal.h"
        +   #endif
        +   #include "main.h"   

    -   remove the file ${mpufamily}_hal_conf.h   

    -   in .c files: nothing so far. but maybe change the #include clauses to use standard apis
    
    -   add a file board_${brd}.c which contains:
        -   in function stm32hal_board_init() all the code which is inside the function main() {}
        -   the function SystemClock_Config() but without HAL_SYSTICK_Config() ......... !
        -   funtion _Error_Handler().
        
    

    
2.7 PROJECT section
    
    make a new target .... with the following properties:
    -   Device:             ${MDKDEVICE}
    -   C/C++ define:       USE_STM32HAL STM32HAL_BOARD_${BRD} ${MPU}
    -   C/C++ includes:     ..\api;..\src\driver\${drivername}\inc;..\src\board\${brd}\inc
    Et cetera.
    You must produce a stm32hal.${brd}.lib ... 
    

    
    
2.8 STARTUP file

    Get the startup .s file used by teh mdk project, rename it into stm32hal.startup.${brd}.s and put it into
    folder stm32hal/startup. 
    
    Then change it so that it can contain inclusion of stm32_stg.h to specify the amount of heap and stack as 
    in the following:
    
        ; in case of error from assembler, you surely forgot --cpreproc in menu asm-options/misc-controls
        ; or may also to include it into asm path in menu asm-options/include-paths
        #include "stm32hal_stg.h"
        
        Stack_Size      EQU     STM32HAL_STG_STACKSIZE
                        AREA    STACK, NOINIT, READWRITE, ALIGN=3
        Stack_Mem       SPACE   Stack_Size 

        Heap_Size       EQU     STM32HAL_STG_HEAPSIZE
                        AREA    HEAP, NOINIT, READWRITE, ALIGN=3
        __heap_base
        Heap_Mem        SPACE   Heap_Size        
    
    And remove the previous definition of Stack_Size and Heap_Size
    
    
3.  The result

    At the end of the process we shall have:
    - a library named stm32hal.${brd}.lib, 
    - a unique point of inclusion with file stm32hal/api/stm32hal.h
    - a startup file stm32hal.startup.${brd}.s
    
    
4. The use of the library

    build a MDK project with options:
    -   Device:             ${MDKDEVICE}
    -   C/C++ define:       USE_STM32HAL STM32HAL_BOARD_${BRD}
    -   C/C++ includes:     location of stm32hal.h; ... whatever else    
    -   ASM include:        location of a private stm32hal_stg.h
    -   ASM misc controls:  --cpreproc
    -   etc
    
    add:
    -   the library stm32hal.${brd}.lib,
    -   a private stm32hal_stg.h
    -   the file stm32hal.startup.${brd}.s (which must be readonly!)
    -   a file with main() {} which eventaully calls:
            stm32hal_config_t cfg = {0};
            cfg.tick1ms_init = config.stm32hal.init1millitick;  // it inits the tick
            cfg.tick1ms_get = config.stm32hal.get1millitick;    // it gets the tick
            
            stm32hal_init(&cfg);
            
    VERY IMPORTANT
    One can implement the 1 ms tick funtions as wanted. 
    
    There are examples for that.
    - in icub-firmware\emBODY\eBcode\arch-arm\board\mtb4\examples\stm32app there is a basic example 
      which uses the systick and just the stm32hal library
    - in icub-firmware\emBODY\eBcode\arch-arm\board\mtb4\examples\embotapp there is a basic example
      which uses the systick and a few number of embot objects
    - in icub-firmware\emBODY\eBcode\arch-arm\board\mtb4\examples\embotappcan there is a skeleton
      application for can messaging with the use of teh systeick and embot objects.
     
    Another solution, the one used in our projects is to use the osal RTOS and the embot objects.    
    See code of any ${brd}-bootloader project for examples.
    
    
    
//  END OF DOCUMENT
    
    
//  work in progress. mostly garbage.    


// OK, RIMUOVI FINO AD ASDF 
//    Then, you must add a ${drivername}/cfg/stm32hal_driver_cfg.h which contains specific macros and values used to shape the code of the HAL driver
//    to behave for a specific board. This file will point to stm32hal/src/board/${brd}/inc/stm32hal_driver_cfg_of_${brd}.h 
    
    To complete the work we must now edit the file ${drivername}/inc/${mpufamily}_hal.h to include the file ${drivername}/cfg/stm32hal_driver_cfg.h 
    instead of the standard file ${mpufamily}_hal_conf.h
    
    For the case of board RFE we have changed the code of file stm32l4xx_hal.h in this way:
    +   // IIT-EXT
    +   #if defined(USE_STM32HAL)
    +       // add a hook towards board specific stuff as created by cubemx
    +       #include "../cfg/stm32hal_driver_cfg.h"
    +   #else
    +       #warning you are using a stm32hal file w/ USE_STM32HAL undefined ... are you sure?   
        /* Includes ------------------------------------------------------------------*/
        #include "stm32l4xx_hal_conf.h"
    +   #endif
    
    And the file stm32hal_driver_cfg.h contains this code;
    
        #include "stm32hal_define.h"
        #if defined(STM32HAL_BOARD_RFE)            
            // path is referred to stm32hal/api
            #include "../src/board/rfe/inc/stm32hal_driver_cfg_of_rfe.h"                        
        #else            
                #error pls define the correct BOARD            
        #endif

    The content of stm32hal_driver_cfg_of_rfe.h will be described in a later section
   

   
    In these two folder you must copy UNCHANGED the files which mdk-cubemx puts inside groups: Drivers\${MPUFAMILY}_HAL_Driver (or similar) and in Drivers\CMSIS.
    in particular:   
    inside ${drivername}/inc put: 
        - all files inside stm32hal\cubemx\${brd}\Drivers\${MPUFAMILY}_HAL_Driver\Inc 
        - some files from stm32hal\cubemx\[$brd}\Drivers\CMSIS: all those in /Include, all those in /Device/ST/${MPUFAMILY}/Include 
        
    inside ${drivername}/src put what mdk-cubemx uses in its Drivers sections.
        - stm32hal\cubemx\${brd}\Drivers/${MPUFAMILY}_HAL_Driver\Src
        - the file it has in Drivers/CMSIS which is specific of the mpu family. For instance, from stm32hal\cubemx\${brd}\Drivers\CMSIS: system_${mpufamily}.c [system_stm32l4xx.c] 

    Now add a customisation hook for the stm32/src/driver 

    -   add a new file stm32hal/src/driver/${drivername}/inc/${mpufamily}_hal_conf.h 
        it must include under the macro STM32HAL_BOARD_${BRD} the file:  "../src/board/${brd}/inc/${mpufamily}_hal_conf_${brd}.h" [stm32l4xx_hal_conf_rfe.h]

// ASDF
    
    
        
x.  works on the code specific for this board which must be put into the stm32/src/board/${brd} folder

    there are several files which must be added in here. their content is taken by files generated by cubemx.
    
    -   file board/${brd}/inc/${mpufamily}_hal_conf_${brd}.h [stm32l4xx_hal_conf_rfe.h]
        rename the template file board/template/mpufamily_hal_conf_brd.h into it. 
        then get the file ${mpufamily}_hal_conf.h [stm32l4xx_hal_conf.h] as generated by cubemx and put it inside our ${mpufamily}_hal_conf_${brd}.h [stm32l4xx_hal_conf_rfe.h]
        you must follow instructions inside the mpufamily_hal_conf_brd.h file to change the original code of ${mpufamily}_hal_conf.h
        in particular we must adjust the include path considering that this file starts at stm32/api ...
        
    -   all files generated by cubemx for a specific peripheral. for instance: gpio.[c, h], tim.[c, h] etc.
        copy the .c files into board/${brd}/src and the .h files into board/${brd}/inc  
        change them ... in this way:
        - the .h files must include stm32hal.h, in a way similar to:
            // IIT-EXT     
            #if defined(USE_STM32HAL)
                #include "stm32hal.h"
            #else
            #include "stm32l4xx_hal.h"
            #endif
        - the .c files dont need to be changed ...
      
x.  prepare the stm32hal/api folder.

    -   stm32hal_define.h
        -   add a new STM32HAL_BOARD_xxx section by copying from an existing one and then modify it.
        -   open the mdk project generated by cubemx (called mdk-cubemx).
        -   in c++ tab get the macros and put them inside the board section
            [USE_HAL_DRIVER,STM32L452xx] 
        -   add in this section any other macro you may use. 
    
    -   stm32hal_driver.h
        -  decide which stm32zzxx_hal.h file from stm32hal/src/.... to include. 
           explanation: in here it comes the code which cubemx copies into the mdk proejct.
           [Drivers\STM32L4xx_HAL_Driver]
           
    -   stm32hal_bsp.h
        -   add a new STM32HAL_BOARD_xxx section and add:
            -   whatever .h files are in mdk-cubemx 
            explain better