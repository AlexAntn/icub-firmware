Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:55  C:\Software\iCub\firmware\controllerBll\Support\Rtmpy32.asm  Page 1



1                          ;----------------------------------------------------------------------
2                          ;  Metrowerks Embedded Runtime Support 1998 May
3                          ;
4                          ;       rtmpy32.asm
5                          ;
6                          ;               Copyright © 1998 Metrowerks, Inc.
7                          ;               All rights reserved.
8                          ;
9                          ;       Routines
10                         ;       --------
11                         ;       32 bit signed and unsigned multiply (they're the same)
12                         ;
13                         ;----------------------------------------------------------------------
14                         ;
15                                   section rtlib
16     
17                                   global  ARTMPYS32U
18                                   global  ARTMPYU32U
19        P:000000                   org     p:
20     
21                         ARTMPYS32U:
22                         ARTMPYU32U:
23        P:000000 8306              move              a1,y1                   ; save first parameter (A) in y
24        P:000001 8108              move              a0,y0
25        P:000002 B0FD              move              X:(sp-3),x0
26     
27        P:000003 C400              move              #0,A
28        P:000004 8E00              tstw    x0                                ; is low half of second parameter negative?
29        P:000005 A403              bge     positive
30        P:000006 8601              move              y0,a1                   ; bit 15 of x0 is set, so need to eventually add
31                                                                             ; in y0*2^15, moving it to a1 is equivalent
32                                                                             ; to y0*2^16. The "asr" following the "macsu"
33                                                                             ; really makes this y0*2^15.
34     
35        P:000007 7635              lsl     x0                                ; bit 15 is set, so clear it since this is the
36        P:000008 7E35              lsr     x0                                ; signed operand in the "macsu" below.
37     
38                         positive:
39        P:000009 7C4C              macsu   x0,y0,A
40        P:00000A 7C30              asr     A
41     
42                                                                             ; start CB * 2^16 (C is signed, B is unsigned)
43                                                                             ; C is currently in memory, B is in x0
44                                                                             ; can do this as a regular 16x16 integer multiply
45                                                                             ; since the upper 16-bits are going to be discarded
46                                                                             ; anyways!
47        P:00000B B0FE              move              X:(sp-2),x0
48        P:00000C 664F              impy    y0,x0,y0
49        P:00000D 6450              add     y0,A                              ; this adds y0 zero-extended with 16-LSBs to A,
50                                                                             ; so the 2^16 is for free!!
51     
52                                                                             ; start AD * 2^16 (A is signed, D is unsigned)
53                                                                             ; A is currently in y1, D is in memory
54                                                                             ; can do this as a regular 16x16 integer multiply
55                                                                             ; since the upper 16-bits are going to be discarded
56                                                                             ; anyways!
57        P:00000E B1FD              move              X:(Sp-3),y0
58        P:00000F 667F              impy    y1,y0,y0
59        P:000010 6450              add     y0,A                              ; this adds x0 zero-extended with 16-LSBs to A,
60                                                                             ; so the 2^16 is for free!!
61     
62                                                                             ; need to correctly sign-extend A
Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:55  C:\Software\iCub\firmware\controllerBll\Support\Rtmpy32.asm  Page 2



63        P:000011 8008              move              a0,x0
64        P:000012 8406              move              a1,A
65        P:000013 8080              move              x0,a0
66     
67        P:000014 EDD8              rts
68     
69                                   endsec
70     
71                                   end

0    Errors
0    Warnings


