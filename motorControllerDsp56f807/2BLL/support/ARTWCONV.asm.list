Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:56  C:\Software\iCub\firmware\controllerBll\Support\ARTWCONV.asm  Page 1



1                          ;=============================================================
2                          ;=== FILE: ARTWCONV.asm
3                          ;===
4                          ;=== Copyright (c)1998 Metrowerks, Inc.  All rights reserved.
5                          ;=============================================================
6                          ; Recommended tab stop = 8.
7      
8      
9                          ;===============================================================================
10                         ; SECTION: the floating point code
11                                   SECTION fp_engine
12                                                   OPT     CC
13     
14                                                   include "Fp568d.h"
15                                         ;=============================================================
16                                         ;=== FILE: Fp568d.h
17                                         ;===
18                                         ;=== Copyright (c)1998 Metrowerks, Inc.  All rights reserved.
19                                         ;=============================================================
20                                         ; Recommended tab stop = 8.
21     
22                                                   XREF    FPE_state
23     
24        0001                             UseRep    EQU     1
25     
26     
27                                         ; xhi/xlo save the x operand (passed in a) in two-op functions, which
28                                         ;       is handy for NaN handling, etc.
29                                         ; yhi/ylo save the y operand (passed in b) in two-op functions, which
30                                         ;       is handy for NaN handling, etc.
31                                         ; rexp is the result exponent
32                                         ; rsign is the result sign (compute as xor during unpack)
33                                         ; yflip is 0 for add, 0x8000 for sub, to indicate a flip of y's sign
34                                         ; omr contains value of original OMR register on entry to routine
35        0000                             xhi       EQU     0
36        0001                             xlo       EQU     1
37        0002                             yhi       EQU     2
38        0003                             ylo       EQU     3
39        0004                             yflip     EQU     4
40        0005                             rsign     EQU     5
41        0006                             rexp      EQU     6
42        0007                             saved_omr EQU     7
43     
44        0008                             SIZE_TEMPS EQU    8
45     
46                                         ;offsets for the unpack routines.
47        0002                             xhi_unp   EQU     2
48        0003                             xlo_unp   EQU     3
49        0004                             yhi_unp   EQU     4
50        0005                             ylo_unp   EQU     5
51        0006                             yflip_unp EQU     6
52        0007                             rsign_unp EQU     7
53        0008                             rexp_unp  EQU     8
54     
55     
56        0040                             INVALID   EQU     $0040
57        0010                             OVERFLOW  EQU     $0010
58        0008                             UNDERFLOW EQU     $0008
59        0020                             DIVBYZERO EQU     $0020
60        0004                             INEXACT   EQU     $0004
61     
62        0000                             TONEAREST EQU     0
Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:56  Fp568d.h  Page 2



63        0001                             TOWARDZERO EQU    1
64        0002                             UPWARD    EQU     2
65        0003                             DOWNWARD  EQU     3
66        0002                             BITDIRRND EQU     2
67                                         BITDOWNORCHOP
68        0001                                       EQU     1
69     
70                                         LFPState  MACRO
71   m                                               move    x:FPE_state,x0
72   m                                               ENDM
73     
74                                         SetInvalid MACRO
75   m                                               bfset   #INVALID,x:FPE_state
76   m                                               ENDM
77     
78                                         SetInexact MACRO
79   m                                               bfset   #INEXACT,x:FPE_state
80   m                                               ENDM
81     
82                                         SetOverflow
83                                                   MACRO
84   m                                               bfset   #(OVERFLOW+INEXACT),x:FPE_state
85   m                                               ENDM
86     
87                                         SetUnderflow
88                                                   MACRO
89   m                                               bfset   #(UNDERFLOW+INEXACT),x:FPE_state
90   m                                               ENDM
91     
92                                         SetDivByZero
93                                                   MACRO
94   m                                               bfset   #DIVBYZERO,x:FPE_state
95   m                                               ENDM
96     
97                                         StFPState MACRO
98   m                                               move    x0,x:FPE_state
99   m                                               ENDM
100    
101                                        NORMALIZE_OMR
102                                                  MACRO
103  m                                               move    OMR,x:(SP-saved_omr)              ; save original OMR state
104  m                                               bfset   #$0100,OMR                        ; set CC bit
105  m                                               bfclr   #$0030,OMR                        ; clear R and SA bits
106  m                                               ENDM
107    
108                                        RESTORE_OMR
109                                                  MACRO
110  m                                               move    x:(SP-saved_omr),OMR              ; restore original OMR state
111  m                                               ENDM
112    
113    
114                                                  GLOBAL  ARTU16_TO_F32
115                                                  GLOBAL  ARTS16_TO_F32
116                                                  GLOBAL  ARTU32_TO_F32
117                                                  GLOBAL  ARTS32_TO_F32
118    
119    
120                                        ;===============================================================================
121                                        ; FUNCTION: ARTU16_TO_F32, ARTU32_TO_F32
122                                        ; DESCRIPTION: Convert unsigned word to float.
123                                        ; INPUT: y0 = unsigned word
124                                        ; OUTPUT: a = float
Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:56  C:\Software\iCub\firmware\controllerBll\Support\ARTWCONV.asm  Page 3



125                                        ; OPTIMIZATION: Uses signed conversion, with faked positive sign.
126                                        ;
127                                        ARTU16_TO_F32:
128       P:000000 8401    [2 -        2]            move              y0,a
129       P:000001 C30F    [2 -        4]            move              #15,y1
130       P:000002 A901    [4 -        8]            bra     utoX_common
131                                        ARTU32_TO_F32:
132       P:000003 C31F    [2 -       10]            move              #31,y1
133                                        utoX_common:
134       P:000004 DE4B    [2 -       12]            lea     (SP+SIZE_TEMPS)                   ; reserve stack space for all temps
                   0008
135                                                  NORMALIZE_OMR
139       P:00000C C100    [2 -       28]            move              #0,y0
140       P:00000D 91FB    [2 -       30]            move              y0,x:(sp-rsign)         ; positive sign
141       P:00000E A90E    [4 -       34]            bra     wtoX_common
142    
143                                        ;===============================================================================
144                                        ; FUNCTION: ARTS16_TO_F32, ARTS32_TO_F32
145                                        ; DESCRIPTION: Convert signed word to float.
146                                        ; INPUT: y0 = signed word
147                                        ; OUTPUT: a = float
148                                        ; CASES: Zero maps to +0. Large values are rounded according to the current mode.
149                                        ;
150                                        ARTS16_TO_F32:
151       P:00000F 8401    [2 -       36]            move              y0,a
152       P:000010 C30F    [2 -       38]            move              #15,y1
153       P:000011 A901    [4 -       42]            bra     itoX_common
154                                        ARTS32_TO_F32:
155       P:000012 C31F    [2 -       44]            move              #31,y1
156                                        itoX_common:
157       P:000013 DE4B    [2 -       46]            lea     (SP+SIZE_TEMPS)                   ; reserve stack space for all temps
                   0008
158                                                  NORMALIZE_OMR
162       P:00001B 96FB    [2 -       62]            move              a1,x:(sp-rsign)
163       P:00001C 6C20    [2 -       64]            abs     a                                 ; ********** check extension ***********
164                                                                                            ; fall through to wtoX_common
165    
166                                        ;===============================================================================
167                                        ; TERMINAL: wtoX_common  (word to floating conversion, common code)
168                                        ; DESCRIPTION: Normalize integer in a and coerce to destination. If dest
169                                        ;       is wide (future), be sure to widen the integer operand suitably.
170                                        ; INPUT: a = unsigned integer, rsign = sign, y1 = unbiased exp
171                                        ; OUTPUT: Convert to float (or double) destination using coercions.
172                                        ;
173                                        wtoX_common:
174                                                                                            ; Normalize the operand in a and set the exponent to the
175                                                                                            ; unbiased exp.  Then branch to appropriate coercion routine.
176                                                                                            ; SPECIAL CASE: Zero is treated specially.
177       P:00001D 47C0    [2 -       66]            add     #$7f,y1                           ; bias exponent
                   007F
178       P:00001F 8E06    [2 -       68]            tstw    a1                                ; is high half 0?
179       P:000020 A50B    [4 -       72]            blt     wtoX_done                         ; already normal
180       P:000021 A206    [4 -       76]            bne     wtoX_leftward                     ; go shift < 16 bits
181       P:000022 8E08    [2 -       78]            tstw    a0
182       P:000023 A30A    [4 -       82]            beq     y_34_rts                          ; return with 0
183                                                                                            ; Fall through with 16+ bits of shift
184       P:000024 8408    [2 -       84]            move              a0,a                    ; shift and clear low half
185       P:000025 5790    [2 -       86]            sub     #16,y1
186       P:000026 8E06    [2 -       88]            tstw    a1
187       P:000027 A504    [4 -       92]            blt     wtoX_done                         ; exactly 16 bits needed
188                                        wtoX_leftward:
189       P:000028 5781    [2 -       94]            sub     #1,y1
Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:56  C:\Software\iCub\firmware\controllerBll\Support\ARTWCONV.asm  Page 4



190       P:000029 7430    [2 -       96]            asl     a
191       P:00002A 8E06    [2 -       98]            tstw    a1
192       P:00002B A67C    [4 -      102]            bgt     wtoX_leftward
193                                        wtoX_done:
194       P:00002C E984    [6 -      108]            jmp     ARTf_coerce
                   0000
195    
196                                        y_34_rts:
197                                                  RESTORE_OMR
199       P:000030 9EF8    [2 -      116]            lea     (SP-SIZE_TEMPS)                   ; pop temp stack space
200       P:000031 EDD8    [10 -      126]           rts
201    
202                                                  ENDSEC

0    Errors
0    Warnings


