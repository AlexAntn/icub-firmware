Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:56  C:\Software\iCub\firmware\controllerBll\Support\ARTWCONVISR.asm  Page 1



1                          ;=============================================================
2                          ;=== FILE: isrutilities.asm
3                          ;===
4                          ;=== Copyright (c)1998 Metrowerks, Inc.  All rights reserved.
5                          ;=============================================================
6                          ; Recommended tab stop = 8.
7      
8                          ;===============================================================================
9                          ; SECTION: the floating point code
10                                   SECTION fp_engine
11                                                   OPT     CC
12                                                   GLOBAL  ARTU16_TO_F32ISR
13                                                   GLOBAL  ARTS16_TO_F32ISR
14                                                   GLOBAL  ARTU32_TO_F32ISR
15                                                   GLOBAL  ARTS32_TO_F32ISR
16     
17                                                   include "Fp568d.h"
18                                         ;=============================================================
19                                         ;=== FILE: Fp568d.h
20                                         ;===
21                                         ;=== Copyright (c)1998 Metrowerks, Inc.  All rights reserved.
22                                         ;=============================================================
23                                         ; Recommended tab stop = 8.
24     
25                                                   XREF    FPE_state
26     
27        0001                             UseRep    EQU     1
28     
29     
30                                         ; xhi/xlo save the x operand (passed in a) in two-op functions, which
31                                         ;       is handy for NaN handling, etc.
32                                         ; yhi/ylo save the y operand (passed in b) in two-op functions, which
33                                         ;       is handy for NaN handling, etc.
34                                         ; rexp is the result exponent
35                                         ; rsign is the result sign (compute as xor during unpack)
36                                         ; yflip is 0 for add, 0x8000 for sub, to indicate a flip of y's sign
37                                         ; omr contains value of original OMR register on entry to routine
38        0000                             xhi       EQU     0
39        0001                             xlo       EQU     1
40        0002                             yhi       EQU     2
41        0003                             ylo       EQU     3
42        0004                             yflip     EQU     4
43        0005                             rsign     EQU     5
44        0006                             rexp      EQU     6
45        0007                             saved_omr EQU     7
46     
47        0008                             SIZE_TEMPS EQU    8
48     
49                                         ;offsets for the unpack routines.
50        0002                             xhi_unp   EQU     2
51        0003                             xlo_unp   EQU     3
52        0004                             yhi_unp   EQU     4
53        0005                             ylo_unp   EQU     5
54        0006                             yflip_unp EQU     6
55        0007                             rsign_unp EQU     7
56        0008                             rexp_unp  EQU     8
57     
58     
59        0040                             INVALID   EQU     $0040
60        0010                             OVERFLOW  EQU     $0010
61        0008                             UNDERFLOW EQU     $0008
62        0020                             DIVBYZERO EQU     $0020
Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:56  Fp568d.h  Page 2



63        0004                             INEXACT   EQU     $0004
64     
65        0000                             TONEAREST EQU     0
66        0001                             TOWARDZERO EQU    1
67        0002                             UPWARD    EQU     2
68        0003                             DOWNWARD  EQU     3
69        0002                             BITDIRRND EQU     2
70                                         BITDOWNORCHOP
71        0001                                       EQU     1
72     
73                                         LFPState  MACRO
74   m                                               move    x:FPE_state,x0
75   m                                               ENDM
76     
77                                         SetInvalid MACRO
78   m                                               bfset   #INVALID,x:FPE_state
79   m                                               ENDM
80     
81                                         SetInexact MACRO
82   m                                               bfset   #INEXACT,x:FPE_state
83   m                                               ENDM
84     
85                                         SetOverflow
86                                                   MACRO
87   m                                               bfset   #(OVERFLOW+INEXACT),x:FPE_state
88   m                                               ENDM
89     
90                                         SetUnderflow
91                                                   MACRO
92   m                                               bfset   #(UNDERFLOW+INEXACT),x:FPE_state
93   m                                               ENDM
94     
95                                         SetDivByZero
96                                                   MACRO
97   m                                               bfset   #DIVBYZERO,x:FPE_state
98   m                                               ENDM
99     
100                                        StFPState MACRO
101  m                                               move    x0,x:FPE_state
102  m                                               ENDM
103    
104                                        NORMALIZE_OMR
105                                                  MACRO
106  m                                               move    OMR,x:(SP-saved_omr)              ; save original OMR state
107  m                                               bfset   #$0100,OMR                        ; set CC bit
108  m                                               bfclr   #$0030,OMR                        ; clear R and SA bits
109  m                                               ENDM
110    
111                                        RESTORE_OMR
112                                                  MACRO
113  m                                               move    x:(SP-saved_omr),OMR              ; restore original OMR state
114  m                                               ENDM
115    
116    
117    
118                                        ;===============================================================================
119                                        ; FUNCTION: ARTU16_TO_F32ISR
120                                        ; DESCRIPTION: ISR wrapper for ARTU16_TO_F32
121                                        ; INPUT: none
122                                        ; OUTPUT: none
123                                        ;
124                                        ARTU16_TO_F32ISR:
Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:56  C:\Software\iCub\firmware\controllerBll\Support\ARTWCONVISR.asm  Page 3



125                                        ;
126                                        ; The result is in A, so do not save/restore A
127    
128       P:000000 DE0B    [2 -        2]            lea     (SP)+
129    
130       P:000001 D10B    [2 -        4]            move              Y0,X:(SP)+
131       P:000002 D00B    [2 -        6]            move              X0,X:(SP)+
132       P:000003 D30B    [2 -        8]            move              Y1,X:(SP)+
133       P:000004 D80B    [2 -       10]            move              R0,X:(SP)+
134       P:000005 D18B    [2 -       12]            move              B0,X:(SP)+
135       P:000006 D70B    [2 -       14]            move              B1,X:(SP)+
136       P:000007 D39F    [2 -       16]            move              B2,X:(SP)
137    
138    
139       P:000008 E9C8    [6 -       22]            jsr     ARTU16_TO_F32
                   0000
140    
141       P:00000A F39B    [2 -       24]            pop     B2
142       P:00000B F71B    [2 -       26]            pop     B1
143       P:00000C F19B    [2 -       28]            pop     B0
144       P:00000D F81B    [2 -       30]            pop     R0
145       P:00000E F31B    [2 -       32]            pop     Y1
146       P:00000F F01B    [2 -       34]            pop     X0
147       P:000010 F11B    [2 -       36]            pop     Y0
148       P:000011 EDD8    [10 -       46]           rts
149    
150                                        ;===============================================================================
151                                        ; FUNCTION: ARTS16_TO_F32ISR
152                                        ; DESCRIPTION: ISR wrapper for ARTS16_TO_F32
153                                        ; INPUT: none
154                                        ; OUTPUT: none
155                                        ;
156                                        ARTS16_TO_F32ISR:
157                                        ;
158                                        ; The result is in A, so do not save/restore A
159                                        ;
160       P:000012 DE0B    [2 -       48]            lea     (SP)+
161    
162       P:000013 D10B    [2 -       50]            move              Y0,X:(SP)+
163       P:000014 D00B    [2 -       52]            move              X0,X:(SP)+
164       P:000015 D30B    [2 -       54]            move              Y1,X:(SP)+
165       P:000016 D80B    [2 -       56]            move              R0,X:(SP)+
166       P:000017 D18B    [2 -       58]            move              B0,X:(SP)+
167       P:000018 D70B    [2 -       60]            move              B1,X:(SP)+
168       P:000019 D39F    [2 -       62]            move              B2,X:(SP)
169    
170       P:00001A E9C8    [6 -       68]            jsr     ARTS16_TO_F32
                   0000
171    
172       P:00001C F39B    [2 -       70]            pop     B2
173       P:00001D F71B    [2 -       72]            pop     B1
174       P:00001E F19B    [2 -       74]            pop     B0
175       P:00001F F81B    [2 -       76]            pop     R0
176       P:000020 F31B    [2 -       78]            pop     Y1
177       P:000021 F01B    [2 -       80]            pop     X0
178       P:000022 F11B    [2 -       82]            pop     Y0
179       P:000023 EDD8    [10 -       92]           rts
180    
181                                        ;===============================================================================
182                                        ; FUNCTION: ARTU32_TO_F32ISR
183                                        ; DESCRIPTION: ISR wrapper for ARTU32_TO_F32
184                                        ; INPUT: none
Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:56  C:\Software\iCub\firmware\controllerBll\Support\ARTWCONVISR.asm  Page 4



185                                        ; OUTPUT: none
186                                        ;
187                                        ARTU32_TO_F32ISR:
188                                        ;
189                                        ; The result is in Y0, so do not save/restore Y0
190                                        ;
191                                        ; The result is in A, so do not save/restore A
192    
193       P:000024 DE0B    [2 -       94]            lea     (SP)+
194    
195       P:000025 D10B    [2 -       96]            move              Y0,X:(SP)+
196       P:000026 D00B    [2 -       98]            move              X0,X:(SP)+
197       P:000027 D30B    [2 -      100]            move              Y1,X:(SP)+
198       P:000028 D80B    [2 -      102]            move              R0,X:(SP)+
199       P:000029 D18B    [2 -      104]            move              B0,X:(SP)+
200       P:00002A D70B    [2 -      106]            move              B1,X:(SP)+
201       P:00002B D39F    [2 -      108]            move              B2,X:(SP)
202    
203    
204       P:00002C E9C8    [6 -      114]            jsr     ARTU32_TO_F32
                   0000
205    
206       P:00002E F39B    [2 -      116]            pop     B2
207       P:00002F F71B    [2 -      118]            pop     B1
208       P:000030 F19B    [2 -      120]            pop     B0
209       P:000031 F81B    [2 -      122]            pop     R0
210       P:000032 F31B    [2 -      124]            pop     Y1
211       P:000033 F01B    [2 -      126]            pop     X0
212       P:000034 F11B    [2 -      128]            pop     Y0
213       P:000035 EDD8    [10 -      138]           rts
214    
215                                        ;===============================================================================
216                                        ; FUNCTION: ARTS32_TO_F32ISR
217                                        ; DESCRIPTION: ISR wrapper for ARTS32_TO_F32
218                                        ; INPUT: none
219                                        ; OUTPUT: none
220                                        ;
221                                        ARTS32_TO_F32ISR:
222                                        ;
223                                        ; The result is in Y0 so do not save/restore Y0
224                                        ;
225    
226       P:000036 DE0B    [2 -      140]            lea     (SP)+
227    
228       P:000037 D10B    [2 -      142]            move              Y0,X:(SP)+
229       P:000038 D00B    [2 -      144]            move              X0,X:(SP)+
230       P:000039 D30B    [2 -      146]            move              Y1,X:(SP)+
231       P:00003A D80B    [2 -      148]            move              R0,X:(SP)+
232       P:00003B D18B    [2 -      150]            move              B0,X:(SP)+
233       P:00003C D70B    [2 -      152]            move              B1,X:(SP)+
234       P:00003D D39F    [2 -      154]            move              B2,X:(SP)
235    
236    
237       P:00003E E9C8    [6 -      160]            jsr     ARTS32_TO_F32
                   0000
238    
239       P:000040 F39B    [2 -      162]            pop     B2
240       P:000041 F71B    [2 -      164]            pop     B1
241       P:000042 F19B    [2 -      166]            pop     B0
242       P:000043 F81B    [2 -      168]            pop     R0
243       P:000044 F31B    [2 -      170]            pop     Y1
244       P:000045 F01B    [2 -      172]            pop     X0
Motorola DSP56800 Assembler  Version 6.3.16  110-11-03  12:48:56  C:\Software\iCub\firmware\controllerBll\Support\ARTWCONVISR.asm  Page 5



245       P:000046 F11B    [2 -      174]            pop     Y0
246       P:000047 EDD8    [10 -      184]           rts
247    
248                                                  endsec
249    
250                                                  end

0    Errors
0    Warnings


